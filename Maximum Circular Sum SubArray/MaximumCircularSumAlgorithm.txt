Here's an algorithm to solve the maximum circular sum subarray problem:

1.Find the maximum subarray sum using Kadane's algorithm (which works for non-circular arrays).
2.Find the minimum subarray sum using Kadane's algorithm for the negative of the original array.
3.Compute the total sum of the original array.
4.The maximum circular sum is the maximum of:
  Maximum subarray sum computed in step 1.
  Total sum of the original array minus the minimum subarray sum      computed in step 2.

Here's the Python implementation of the algorithm:

def max_subarray_sum(arr):
    max_sum = arr[0]
    current_sum = arr[0]

    for num in arr[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)

    return max_sum

def min_subarray_sum(arr):
    return -max_subarray_sum([-x for x in arr])

def max_circular_sum(arr):
    # Maximum subarray sum
    max_sum = max_subarray_sum(arr)
    
    # Minimum subarray sum (which is the maximum subarray sum for the negative of the original array)
    min_sum = min_subarray_sum(arr)
    
    # Total sum of the original array
    total_sum = sum(arr)
    
    # Maximum circular sum is the maximum of maximum subarray sum and (total sum - minimum subarray sum)
    circular_max = max(max_sum, total_sum - min_sum)
    
    return circular_max

# Example usage:
arr = [8, -1, 3, 4]
print("Maximum circular sum:", max_circular_sum(arr))
