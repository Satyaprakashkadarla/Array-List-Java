function timSort(arr):
    MIN_RUN = 32
    n = length(arr)

    # Step 1: Sort small runs using insertion sort
    for i from 0 to n-1 by MIN_RUN:
        insertionSort(arr, i, min((i + MIN_RUN - 1), (n - 1)))

    # Step 2: Merge sorted runs using merge sort
    size = MIN_RUN
    while size < n:
        for left from 0 to n-1 by 2*size:
            mid = left + size - 1
            right = min((left + 2*size - 1), (n - 1))
            merge(arr, left, mid, right)
        size = 2 * size

function insertionSort(arr, left, right):
    for i from left + 1 to right:
        key = arr[i]
        j = i - 1
        while j >= left and arr[j] > key:
            arr[j + 1] = arr[j]
            j = j - 1
        arr[j + 1] = key

function merge(arr, left, mid, right):
    leftLen = mid - left + 1
    rightLen = right - mid
    leftArr = new array[leftLen]
    rightArr = new array[rightLen]

    for i from 0 to leftLen - 1:
        leftArr[i] = arr[left + i]
    for i from 0 to rightLen - 1:
        rightArr[i] = arr[mid + 1 + i]

    i = 0
    j = 0
    k = left

    while i < leftLen and j < rightLen:
        if leftArr[i] <= rightArr[j]:
            arr[k] = leftArr[i]
            i = i + 1
        else:
            arr[k] = rightArr[j]
            j = j + 1
        k = k + 1

    while i < leftLen:
        arr[k] = leftArr[i]
        i = i + 1
        k = k + 1

    while j < rightLen:
        arr[k] = rightArr[j]
        j = j + 1
        k = k + 1
