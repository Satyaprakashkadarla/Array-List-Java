function removeDuplicates(sortedArray):
    if length(sortedArray) == 0:
        return 0 // Empty array case

    // Initialize a variable to keep track of the next position to place a non-duplicate element
    nextNonDuplicateIndex = 1

    // Iterate through the array starting from the second element
    for i from 1 to length(sortedArray) - 1:
        // If the current element is not equal to the previous element, it's a non-duplicate
        if sortedArray[i] != sortedArray[nextNonDuplicateIndex - 1]:
            // Place the non-duplicate element at the next position
            sortedArray[nextNonDuplicateIndex] = sortedArray[i]
            // Move to the next position for the next non-duplicate element
            nextNonDuplicateIndex = nextNonDuplicateIndex + 1

    return nextNonDuplicateIndex // Return the length of the array without duplicates

// Example usage:
sortedArray = [1, 1, 2, 3, 3, 4, 5, 5, 5, 6]
newLength = removeDuplicates(sortedArray)
print("Array with duplicates removed:", sortedArray[0:newLength])


//This pseudocode follows a similar logic to the Python code provided earlier. It iterates through the array and updates the array in place, skipping duplicate elements. Finally, it returns the length of the array without duplicates.
