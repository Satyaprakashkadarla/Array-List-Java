function findMedianSortedArrays(nums1, nums2):
    if length(nums1) > length(nums2):
        swap(nums1, nums2)
    
    m = length(nums1)
    n = length(nums2)
    total_half_len = (m + n + 1) / 2
    
    left = 0
    right = m
    
    while left <= right:
        partition1 = (left + right) / 2
        partition2 = total_half_len - partition1
        
        max_left1 = -INF if partition1 == 0 else nums1[partition1 - 1]
        min_right1 = INF if partition1 == m else nums1[partition1]
        
        max_left2 = -INF if partition2 == 0 else nums2[partition2 - 1]
        min_right2 = INF if partition2 == n else nums2[partition2]
        
        if max_left1 <= min_right2 and max_left2 <= min_right1:
            if (m + n) % 2 == 0:
                return (max(max_left1, max_left2) + min(min_right1, min_right2)) / 2
            else:
                return max(max_left1, max_left2)
        elif max_left1 > min_right2:
            right = partition1 - 1
        else:
            left = partition1 + 1
